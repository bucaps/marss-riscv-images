/* VM configuration file */
{
	version: 1,
	machine: "riscv32",
	bios: "bbl32.bin",
	cmdline: "console=hvc0 root=/dev/vda rw",
	drive0: { file: "riscv32.bin" },
	eth0: { driver: "user" },

	core_name: "default-riscv-core",		/* Name of the simulated RISC-V CPU */
	num_cpu_stages: 6,						/* Number of pipeline stages: 5, 6 */

	tlb_size: 32,							/* Number of entries in instruction TLB, load TLB and store TLB */
	tlb_miss_latency: 16,					/* Latency for hardware page table walk in CPU cycles on a tlb miss */

	sim_stats_file: "simstats.csv",			/* Path of file to dump simulation stats */
	sim_trace_file: "simtrace.txt",			/* Path to file to dump commit trace, must compile MARSS with CONFIG_SIM_TRACE CFLAG */

	num_alu_stages: 1,						/* Number of stages for ALU (Integer ALU unit) */
	alu_stage_latency: "1",					/* Latency for each ALU stage, comma seperated. eg. "1" */			

	num_mul_stages: 2, 						/* Number of stages for MUL (Integer MUL unit) */			
	mul_stage_latency: "1,1",				/* Latency for each MUL stage, comma seperated. eg. "1,2,1" */

	num_div_stages: 4,						/* Number of stages for DIV (Integer DIV unit) */
	div_stage_latency: "1,2,2,1",			/* Latency for each DIV stage, comma seperated. eg. "1,2,1" */

	num_fpu_alu_stages: 1,					/* Number of stages for FPU_ALU (Floating Point ALU Unit) */
	fpu_alu_stage_latency: "1",				/* Latency for each FPU_ALU stage, comma seperated. eg. "1,2,1" */

	num_fpu_fma_stages: 1,					/* Number of stages for FPU_FMA (Floating Point Fused Multiply Add Unit) */
	fpu_fma_stage_latency: "1",				/* Latency for each FPU_FMA stage, comma seperated. eg. "1,2,1" */

	enable_bpu: "true", 					/* Enable branch prediction unit: true, false */
	btb_size: 256, 							/* Number of entries in BTB, must be power of 2 */
	btb_ways: 1,							/* Number of BTB ways */
	btb_eviction_policy: "lru",				/* Eviction policy for BTB: lru, random */
	bpu_type: "adaptive",					/* Type of predictor: bimodal, adaptive */
	bpu_ght_size: 1, 						/* Number of entries in Global history table, must be power of 2 */
	bpu_pht_size: 1,						/* Number of entries in Pattern history table, must be power of 2 */
	bpu_history_bits: 2,					/* Number of bits in history register */
	bpu_aliasing_func_type: "xor", 			/* Aliasing function for adaptive predictor: and, xor, none */
											/* This can be used to construct Gshare and Gselect predictors when bpu_ght_size and 
											   bpu_pht_size is 1 */

	memory_size: 1024,						/* Size of DRAM in MB */
	mem_access_latency: 3,					/* Latency in CPU cycles to access DRAM */
	data_bus_transaction_size: 32,			/* Memory bus width in bytes */

	enable_l1_caches: "true",				/* Enable L1 caches: true, false */

	icache: {
		probe_latency: 1,					/* Probe latency for icache in CPU cycles */
		size: 32,							/* Size of icache in KBs */
		ways: 8,							/* Number of ways in icache */
		eviction: "lru",					/* Eviction policy for icache: lru, random */
	},

	dcache: {
		probe_latency: 1,					/* Probe latency for dcache in CPU cycles */
		size: 32,							/* Size of dcache in KBs */
		ways: 8,							/* Number of ways in dcache */
		eviction: "lru",					/* Eviction policy for dcache: lru, random */
	},

	enable_l2_cache: "true", 				/* Enable l2_shared_cache: true, false */

	l2_shared_cache: {
		probe_latency: 3,					/* Probe latency for l2_shared_cache in CPU cycles */
		size: 512,							/* Size of l2_shared_cache in KBs */
		ways: 16,							/* Number of ways in l2_shared_cache */
		eviction: "lru", 					/* Eviction policy for l2_shared_cache for: lru, random */
	},

	cache_allocate_on_read_miss: "true",  	/* Allocate entry in cache on read miss: true, false */
	cache_allocate_on_write_miss: "true", 	/* Allocate entry in cache on write miss: true, false  */
	cache_write_policy: "writeback", 		/* Cache write policy: writeback, writethrough */
	words_per_cache_line: 8,			 	/* Number of words in each cache line (therefore the cache-line-size = words_per_cache_line * XLEN bits) */
}